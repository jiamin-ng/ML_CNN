name: ML Flask CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Fix shallow clone for SonarQube

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pytest flake8 flake8-html bandit

    - name: Run Unit Tests
      run: |
        if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest --junitxml=test-results.xml
        else
          echo "No tests found, skipping pytest."
        fi

    - name: Linting with Flake8 and Save Report
      run: flake8 --format=html --htmldir=flake8-report || true

    - name: Upload Flake8 Lint Report
      uses: actions/upload-artifact@v4
      with:
        name: flake8-lint-report
        path: flake8-report/

    - name: Security Scan with Bandit and Save Report
      run: bandit -r app.py -f html -o bandit-report.html || true

    - name: Upload Bandit Security Report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit-report.html

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: "https://sonarcloud.io"
      with:
        args: >
          -Dsonar.projectKey=jiamin-ng_ML_CNN
          -Dsonar.organization=jiamin-ng
          -Dsonar.sources=.
          -Dsonar.python.version=3.9

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to DigitalOcean Container Registry
      run: |
        echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u do --password-stdin

    - name: Build and Push Docker Image
      run: |
        docker build --cache-from registry.digitalocean.com/ml-cnn/flask-app:latest -t flask-app:latest .
        docker tag flask-app:latest registry.digitalocean.com/ml-cnn/flask-app:latest
        docker push registry.digitalocean.com/ml-cnn/flask-app:latest
      

    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.DO_DROPLET_IP }}
        username: root
        key: ${{ secrets.DO_SSH_KEY }}
        script: |
          docker pull registry.digitalocean.com/ml-cnn/flask-app:latest
          docker stop flask-container || true
          docker rm flask-container || true
          docker run -d --restart unless-stopped -p 5000:5000 \
          -e FLASK_RUN_HOST=0.0.0.0 \
          -e FLASK_RUN_PORT=5000 \
          --name flask-container registry.digitalocean.com/ml-cnn/flask-app:latest
